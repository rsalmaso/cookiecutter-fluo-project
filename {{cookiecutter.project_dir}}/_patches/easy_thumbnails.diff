{% raw %}diff -rNu easy_thumbnails-original/conf.py easy_thumbnails-patched/conf.py
--- easy_thumbnails-original/conf.py	2016-12-20 18:38:27.450834080 +0100
+++ easy_thumbnails-patched/conf.py	2017-02-19 08:48:54.000000000 +0100
@@ -1,8 +1,8 @@
 from django.conf import settings as django_settings
-try:
-    from django.conf import BaseSettings
-except ImportError:  # Django <= 1.2
-    from django.conf import Settings as BaseSettings
+
+
+class BaseSettings(object):
+    pass


 class AppSettings(BaseSettings):
diff -rNu easy_thumbnails-original/management/commands/thumbnail_cleanup.py easy_thumbnails-patched/management/commands/thumbnail_cleanup.py
--- easy_thumbnails-original/management/commands/thumbnail_cleanup.py	2017-02-19 09:11:40.635859849 +0100
+++ easy_thumbnails-patched/management/commands/thumbnail_cleanup.py	2017-02-19 08:48:54.000000000 +0100
@@ -107,21 +107,22 @@
     The queryset iterator helps to keep the memory consumption down.
     And also making it easier to process for weaker computers.
     """
-
-    primary_key = 0
-    last_pk = queryset.order_by('-pk')[0].pk
-    queryset = queryset.order_by('pk')
-    while primary_key < last_pk:
-        for row in queryset.filter(pk__gt=primary_key)[:chunksize]:
-            primary_key = row.pk
-            yield row
-        gc.collect()
+    if queryset.exists():
+        primary_key = 0
+        last_pk = queryset.order_by('-pk')[0].pk
+        queryset = queryset.order_by('pk')
+        while primary_key < last_pk:
+            for row in queryset.filter(pk__gt=primary_key)[:chunksize]:
+                primary_key = row.pk
+                yield row
+            gc.collect()


 class Command(BaseCommand):
     help = """ Deletes thumbnails that no longer have an original file. """

-    option_list = BaseCommand.option_list + (
+    # Legacy options, not needed in Django 1.8+
+    option_list = getattr(BaseCommand, 'option_list', ()) + (
         make_option(
             '--dry-run',
             action='store_true',
@@ -143,6 +144,27 @@
             help='Specify a path to clean up.'),
     )

+    def add_arguments(self, parser):
+        parser.add_argument(
+            '--dry-run',
+            action='store_true',
+            dest='dry_run',
+            default=False,
+            help='Dry run the execution.')
+        parser.add_argument(
+            '--last-n-days',
+            action='store',
+            dest='last_n_days',
+            default=0,
+            type=int,
+            help='The number of days back in time to clean thumbnails for.')
+        parser.add_argument(
+            '--path',
+            action='store',
+            dest='cleanup_path',
+            type=str,
+            help='Specify a path to clean up.')
+
     def handle(self, *args, **options):
         tcc = ThumbnailCollectionCleaner()
         tcc.clean_up(
diff -rNu easy_thumbnails-original/migrations/0001_initial.py easy_thumbnails-patched/migrations/0001_initial.py
--- easy_thumbnails-original/migrations/0001_initial.py	2016-12-20 18:38:27.494834079 +0100
+++ easy_thumbnails-patched/migrations/0001_initial.py	2017-02-19 08:48:54.000000000 +0100
@@ -31,7 +31,7 @@
                 ('storage_hash', models.CharField(max_length=40, db_index=True)),
                 ('name', models.CharField(max_length=255, db_index=True)),
                 ('modified', models.DateTimeField(default=django.utils.timezone.now)),
-                ('source', models.ForeignKey(related_name='thumbnails', to='easy_thumbnails.Source')),
+                ('source', models.ForeignKey(on_delete=models.CASCADE, related_name='thumbnails', to='easy_thumbnails.Source')),
             ],
             options={
             },
diff -rNu easy_thumbnails-original/migrations/0002_thumbnaildimensions.py easy_thumbnails-patched/migrations/0002_thumbnaildimensions.py
--- easy_thumbnails-original/migrations/0002_thumbnaildimensions.py	2016-12-20 18:38:27.458834080 +0100
+++ easy_thumbnails-patched/migrations/0002_thumbnaildimensions.py	2017-02-19 08:48:54.000000000 +0100
@@ -15,7 +15,7 @@
             name='ThumbnailDimensions',
             fields=[
                 ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
-                ('thumbnail', models.OneToOneField(related_name='dimensions', to='easy_thumbnails.Thumbnail')),
+                ('thumbnail', models.OneToOneField(on_delete=models.CASCADE, related_name='dimensions', to='easy_thumbnails.Thumbnail')),
                 ('width', models.PositiveIntegerField(null=True)),
                 ('height', models.PositiveIntegerField(null=True)),
             ],
diff -rNu easy_thumbnails-original/models.py easy_thumbnails-patched/models.py
--- easy_thumbnails-original/models.py	2016-12-20 18:38:27.454834080 +0100
+++ easy_thumbnails-patched/models.py	2017-02-19 08:48:54.000000000 +0100
@@ -72,7 +72,8 @@


 class Thumbnail(File):
-    source = models.ForeignKey(Source, related_name='thumbnails')
+    source = models.ForeignKey(Source, related_name='thumbnails',
+                               on_delete=models.CASCADE)

     objects = ThumbnailManager()

@@ -81,7 +82,8 @@


 class ThumbnailDimensions(models.Model):
-    thumbnail = models.OneToOneField(Thumbnail, related_name="dimensions")
+    thumbnail = models.OneToOneField(Thumbnail, related_name="dimensions",
+                                     on_delete=models.CASCADE)
     width = models.PositiveIntegerField(null=True)
     height = models.PositiveIntegerField(null=True)

diff -rNu easy_thumbnails-original/templatetags/easy_thumbnails_tags.py easy_thumbnails-patched/templatetags/easy_thumbnails_tags.py
--- easy_thumbnails-original/templatetags/easy_thumbnails_tags.py	1970-01-01 01:00:00.000000000 +0100
+++ easy_thumbnails-patched/templatetags/easy_thumbnails_tags.py	2017-02-19 08:48:54.000000000 +0100
@@ -0,0 +1,8 @@
+"""
+This allows usage of `easy-thumbnails` in templates
+by {% load easy_thumbnails_tags %} instead of traditional
+{% load thumbnail %}. It's specifically useful in projects
+that do make use of multiple thumbnailer libraries (for
+instance `easy-thumbnails` alongside `sorl-thumbnail`).
+"""
+from .thumbnail import *
diff -rNu easy_thumbnails-original/templatetags/thumbnail.py easy_thumbnails-patched/templatetags/thumbnail.py
--- easy_thumbnails-original/templatetags/thumbnail.py	2016-12-20 18:38:27.466834080 +0100
+++ easy_thumbnails-patched/templatetags/thumbnail.py	2017-02-19 08:48:54.000000000 +0100
@@ -172,7 +172,7 @@
     use the variable like a standard ``ImageFieldFile`` object::

         {% thumbnail obj.picture 200x200 upscale as thumb %}
-        <img href="{{ thumb.url }}"
+        <img src="{{ thumb.url }}"
              width="{{ thumb.width }}"
              height="{{ thumb.height }}" />

diff -rNu easy_thumbnails-original/utils.py easy_thumbnails-patched/utils.py
--- easy_thumbnails-original/utils.py	2016-12-20 18:38:27.470834080 +0100
+++ easy_thumbnails-patched/utils.py	2017-02-19 08:48:54.000000000 +0100
@@ -49,8 +49,8 @@
     if processors is None:
         processors = [
             dynamic_import(p) for p in
-            settings.THUMBNAIL_PROCESSORS +
-            settings.THUMBNAIL_SOURCE_GENERATORS]
+            tuple(settings.THUMBNAIL_PROCESSORS) +
+            tuple(settings.THUMBNAIL_SOURCE_GENERATORS)]
     valid_options = set(['size', 'quality', 'subsampling'])
     for processor in processors:
         args = inspect.getargspec(processor)[0]
@@ -123,17 +123,17 @@
         if orientation == 2:
             im = im.transpose(Image.FLIP_LEFT_RIGHT)
         elif orientation == 3:
-            im = im.rotate(180)
+            im = im.transpose(Image.ROTATE_180)
         elif orientation == 4:
             im = im.transpose(Image.FLIP_TOP_BOTTOM)
         elif orientation == 5:
-            im = im.rotate(-90).transpose(Image.FLIP_LEFT_RIGHT)
+            im = im.transpose(Image.ROTATE_270).transpose(Image.FLIP_LEFT_RIGHT)
         elif orientation == 6:
-            im = im.rotate(-90)
+            im = im.transpose(Image.ROTATE_270)
         elif orientation == 7:
-            im = im.rotate(90).transpose(Image.FLIP_LEFT_RIGHT)
+            im = im.transpose(Image.ROTATE_90).transpose(Image.FLIP_LEFT_RIGHT)
         elif orientation == 8:
-            im = im.rotate(90)
+            im = im.transpose(Image.ROTATE_90)
     return im

 {% endraw %}
