# -*- mode: ruby -*-
# vi: set ft=ruby :

# Look for a Vagrantfile.local to load
local_vagrantfile = "#{__FILE__}.local"
if File.exists?(local_vagrantfile)
  eval File.read(local_vagrantfile)
end

host = RbConfig::CONFIG['host_os']

Vagrant.configure("2") do |config|
  config.vm.box = "{{ cookiecutter.vagrant }}"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true

  # workaround for ubuntu "stdin: is not a tty"
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "virtualbox" do |vb|
    # Boot with headless mode
    vb.gui = false

    # Giving a quarter of system memory to VM and access to all available cpu cores
    if host =~ /darwin/
      # sysctl returns Bytes, converting to MB...
      mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
    elsif host =~ /linux/
      # meminfo returns KB, converting to MB...
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4
    else
      # hardcoding values for windows...
      mem = 1024
    end

    vb.name = "{{ cookiecutter.project_dir }}"
    vb.customize ["modifyvm", :id, "--memory", mem]
    vb.customize ["modifyvm", :id, "--cpus", 1]
    vb.customize [ "modifyvm", :id, "--uartmode1", "file", File.join(Dir.pwd, "log", "%s-console.log" % vb.name) ]
  end

  # Config hostname and IP address so entry can be added to HOSTS file
  config.vm.hostname = "{{ cookiecutter.project_dir }}"
  config.vm.network :private_network, type: "dhcp"

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  config.vm.network "forwarded_port", guest: 8000, host: 8000

  config.vm.synced_folder ".", "/home/vagrant/{{ cookiecutter.project_dir }}", create: true

  # Enable provisioning with a shell script.
  config.vm.provision :shell, :path => "bin/provision.sh"
end
